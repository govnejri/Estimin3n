import torch
from transformers import AutoProcessor, Gemma3nForConditionalGeneration
from peft import PeftModel
import os
from pathlib import Path
from utils.config import MODELS_DIR, OUTPUTS_DIR, MODEL_NAME, ensure_dirs

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# 1. –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –æ—Ç Google
base_model_name = "google/gemma-3n-E4B-it"

# 2. –ü—É—Ç—å –∫ –≤–∞—à–∏–º LoRA –∞–¥–∞–ø—Ç–µ—Ä–∞–º
adapter_path = str(OUTPUTS_DIR / "checkpoint-10000")

# 3. –ò–º—è –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ü–û–õ–ù–û–ô, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
output_dir = str(MODELS_DIR / MODEL_NAME)
# -----------------

print("–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∏ –ü–û–õ–ù–û–ì–û –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –æ—Ç Google...")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–µ–º bfloat16 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏ –∏ device_map –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ GPU
model = Gemma3nForConditionalGeneration.from_pretrained(
    base_model_name,
    torch_dtype=torch.bfloat16,
    device_map="auto", 
)

# –ö–õ–Æ–ß–ï–í–û–ô –®–ê–ì: –ó–∞–≥—Ä—É–∂–∞–µ–º AutoProcessor, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç –≤—Å—ë (—Ç–æ–∫–µ–Ω—ã, –∞—É–¥–∏–æ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
processor = AutoProcessor.from_pretrained(base_model_name)

print("‚úÖ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# 2. –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∞—à–∏ LoRA –∞–¥–∞–ø—Ç–µ—Ä—ã —Å –ø–æ–º–æ—â—å—é PeftModel
print(f"–®–∞–≥ 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –∏–∑ '{adapter_path}'...")
model = PeftModel.from_pretrained(model, adapter_path)
print("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
print("–®–∞–≥ 3: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–µ—Å–æ–≤...")
model = model.merge_and_unload()
print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∞.")

# 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤–º–µ—Å—Ç–µ —Å –ø–æ–ª–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
print(f"–®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤ '{output_dir}'...")
ensure_dirs()
os.makedirs(output_dir, exist_ok=True)
model.save_pretrained(output_dir)
processor.save_pretrained(output_dir)

print(f"üéâ –ú–æ–¥–µ–ª—å –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_dir}")
print("–¢–µ–ø–µ—Ä—å —ç—Ç–∞ –ø–∞–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞, –≤–∫–ª—é—á–∞—è 'preprocessor_config.json'.")